import           Lib
import           Test.HUnit

validTest :: Test
validTest = test ["testTrue" ~: "(valid 4)" ~: True ~=? valid 4, "testFalse" ~: "(valid 9)" ~: False ~=? valid 9]

countStatusTest :: Test
countStatusTest =
  test
    [ "testOne" ~: "(countStatus [(7, 4)])" ~: [(6, 6), (6, 2), (5, 5), (5, 3)] ~=? countStatus [(7, 4)]
    , "testMany" ~: "(countStatus [(4, 5), (5, 7), (7, 6), (6, 4), (7, 2), (6, 0), (4, 1), (2, 0)])" ~:
      [(3, 2), (1, 2), (0, 1)] ~=?
      countStatus [(4, 5), (5, 7), (7, 6), (6, 4), (7, 2), (6, 0), (4, 1), (2, 0)]
    , "testNoneAvailable" ~: "(countStatus [(1, 5), (3, 4), (2, 6), (0, 7)])" ~: [] ~=?
      countStatus [(1, 5), (3, 4), (2, 6), (0, 7)]
    ]

goTest :: Test
goTest =
  test
    [ "testOne" ~: "(countStatus [(1, 3)])" ~:
      Just
        [ (1, 3)
        , (0, 1)
        , (2, 0)
        , (1, 2)
        , (0, 0)
        , (2, 1)
        , (0, 2)
        , (1, 0)
        , (3, 1)
        , (5, 0)
        , (7, 1)
        , (6, 3)
        , (7, 5)
        , (6, 7)
        , (4, 6)
        , (2, 7)
        , (0, 6)
        , (1, 4)
        , (2, 6)
        , (0, 7)
        , (1, 5)
        , (0, 3)
        , (1, 1)
        , (3, 0)
        , (2, 2)
        , (3, 4)
        , (4, 2)
        , (2, 3)
        , (0, 4)
        , (1, 6)
        , (3, 7)
        , (2, 5)
        , (1, 7)
        , (0, 5)
        , (2, 4)
        , (3, 6)
        , (5, 7)
        , (7, 6)
        , (5, 5)
        , (4, 7)
        , (3, 5)
        , (4, 3)
        , (5, 1)
        , (7, 0)
        , (6, 2)
        , (7, 4)
        , (6, 6)
        , (5, 4)
        , (7, 3)
        , (6, 1)
        , (4, 0)
        , (3, 2)
        , (4, 4)
        , (5, 6)
        , (7, 7)
        , (6, 5)
        , (5, 3)
        , (4, 5)
        , (3, 3)
        , (4, 1)
        , (6, 0)
        , (7, 2)
        , (6, 4)
        , (5, 2)
        ] ~=?
      go [(1, 3)]
    , "testMany" ~: "(countStatus [(3, 5), (4, 3), (3, 1), (2, 3), (4, 4), (2, 5), (0, 4), (1, 2), (0, 0), (2, 1)])" ~:
      Just
        [ (3, 5)
        , (4, 3)
        , (3, 1)
        , (2, 3)
        , (4, 4)
        , (2, 5)
        , (0, 4)
        , (1, 2)
        , (0, 0)
        , (2, 1)
        , (0, 2)
        , (1, 0)
        , (2, 2)
        , (0, 1)
        , (2, 0)
        , (4, 1)
        , (6, 0)
        , (7, 2)
        , (6, 4)
        , (7, 6)
        , (5, 7)
        , (6, 5)
        , (7, 7)
        , (5, 6)
        , (3, 7)
        , (1, 6)
        , (2, 4)
        , (0, 3)
        , (1, 1)
        , (3, 0)
        , (5, 1)
        , (7, 0)
        , (6, 2)
        , (5, 0)
        , (7, 1)
        , (6, 3)
        , (7, 5)
        , (6, 7)
        , (4, 6)
        , (2, 7)
        , (0, 6)
        , (1, 4)
        , (3, 3)
        , (5, 2)
        , (4, 0)
        , (3, 2)
        , (1, 3)
        , (0, 5)
        , (1, 7)
        , (3, 6)
        , (1, 5)
        , (0, 7)
        , (2, 6)
        , (4, 7)
        , (5, 5)
        , (7, 4)
        , (6, 6)
        , (4, 5)
        , (5, 3)
        , (3, 4)
        , (4, 2)
        , (5, 4)
        , (7, 3)
        , (6, 1)
        ] ~=?
      go [(3, 5), (4, 3), (3, 1), (2, 3), (4, 4), (2, 5), (0, 4), (1, 2), (0, 0), (2, 1)]
    , "testNowhereToGo" ~: "(countStatus [(1, 5), (3, 4), (2, 6), (0, 7)])" ~: Nothing ~=?
      go [(1, 5), (3, 4), (2, 6), (0, 7)]
    ]

sliceTest :: Test
sliceTest = test ["testSlice" ~: "(slice 1 3 [4, 8, 5, 7, 6, 0])" ~: [8, 5, 7] ~=? slice 1 3 [4, 8, 5, 7, 6, 0]]

cellToStringTest :: Test
cellToStringTest =
  test
    [ "testInt" ~: "(cellToString (Just 54))" ~: "54" ~=? cellToString (Just 54)
    , "testNothing" ~: "(cellToString Nothing)" ~: "-" ~=? cellToString Nothing
    ]

printDeskTest :: Test
printDeskTest =
  test
    [ "testDesk" ~: "(printDesk (...))" ~: "4\t1\t6\t21\t28\t33\t16\t19\n" ++
      "7\t22\t3\t0\t17\t20\t29\t32\n" ++
      "2\t5\t24\t27\t34\t31\t18\t15\n" ++
      "23\t8\t51\t58\t25\t40\t35\t30\n" ++
      "50\t59\t26\t41\t52\t57\t14\t39\n" ++
      "9\t42\t63\t56\t47\t38\t53\t36\n" ++
      "60\t49\t44\t11\t62\t55\t46\t13\n" ++
      "43\t10\t61\t48\t45\t12\t37\t54" ~=?
      printDesk
        [ (1, 3)
        , (0, 1)
        , (2, 0)
        , (1, 2)
        , (0, 0)
        , (2, 1)
        , (0, 2)
        , (1, 0)
        , (3, 1)
        , (5, 0)
        , (7, 1)
        , (6, 3)
        , (7, 5)
        , (6, 7)
        , (4, 6)
        , (2, 7)
        , (0, 6)
        , (1, 4)
        , (2, 6)
        , (0, 7)
        , (1, 5)
        , (0, 3)
        , (1, 1)
        , (3, 0)
        , (2, 2)
        , (3, 4)
        , (4, 2)
        , (2, 3)
        , (0, 4)
        , (1, 6)
        , (3, 7)
        , (2, 5)
        , (1, 7)
        , (0, 5)
        , (2, 4)
        , (3, 6)
        , (5, 7)
        , (7, 6)
        , (5, 5)
        , (4, 7)
        , (3, 5)
        , (4, 3)
        , (5, 1)
        , (7, 0)
        , (6, 2)
        , (7, 4)
        , (6, 6)
        , (5, 4)
        , (7, 3)
        , (6, 1)
        , (4, 0)
        , (3, 2)
        , (4, 4)
        , (5, 6)
        , (7, 7)
        , (6, 5)
        , (5, 3)
        , (4, 5)
        , (3, 3)
        , (4, 1)
        , (6, 0)
        , (7, 2)
        , (6, 4)
        , (5, 2)
        ]
    ]

main :: IO Counts
main = do
  runTestTT validTest
  runTestTT countStatusTest
  runTestTT goTest
  runTestTT sliceTest
  runTestTT cellToStringTest
  runTestTT printDeskTest
